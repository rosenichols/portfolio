<?php
/**
 * @file
 * Code for the contact_form feature.
 */
include_once 'feature_wysiwyg_editor.features.inc';
include_once 'feature_wysiwyg_editor.theme.test.inc';
/**
 * Implements hook_init().
 */
function feature_wysiwyg_editor_init() {
  drupal_add_css(drupal_get_path('module', 'feature_wysiwyg_editor') . '/wysiwyg.css');
}

/**
 * @file
 * Code for the feature_wysiwyg_editor feature.
 */
function feature_wysiwyg_editor_filter_info() {
  $filters = array();
  $filters['feature_wysiwyg_editor_video'] = array(
    'title' => t('Video URL Convertor'),
    'description' => t('Convert Youtube URLS to actual video embeds.'),
    'process callback' => '_feature_wysiwyg_editor_process',
    'weight' => -11
  );


  $filters['feature_wysiwyg_editor_align'] = array(
      'title' => t('Image Alignment CSS Classes'),
      'description' => t('Add a class to floated images.'),
      'process callback' => '_feature_wysiwyg_editor_filter_process',
      'weight' => -12
    );

  return $filters;
}


/**
 * Implements filter process callback.
 */
function _feature_wysiwyg_editor_process($text, $filter) {

  // save all urls and put a token in the body so we can put them back in later.
  $link_search = "#<a(.*?)</a>#si";

  preg_match_all($link_search, $text, $link_matches);

  foreach ($link_matches[0] as $key => $value) {
    $text = str_replace($value, '*******' . $key . '*******', $text);
  }

  /* Replace youtube video urls  */
  $youtube_search = '/\s*[a-zA-Z\/\/:\.]*youtube.com\/watch\?v=([a-zA-Z0-9\-_]+)([a-zA-Z0-9\/\*\-\_\?\&\;\%\=\.]*)/i';
  $youtube_replace = '<iframe class="video youtube" title="Youtube Video $1" src="//www.youtube.com/embed/$1"></iframe>';
  $output = preg_replace($youtube_search, $youtube_replace, $text);

  /* Replace vimeo video urls  */
  $vimeo_search = '/https?:\/\/(www.vimeo|vimeo)\.com(\/|\/clip:)(\d+)(.*?)/';
  $vimeo_replace = '<iframe class="video vimeo" title="Vimeo Video $3" src="//player.vimeo.com/video/$3"></iframe>';
  $output = preg_replace($vimeo_search, $vimeo_replace, $output);

  /* Replace youtube video urls that use the youtu.be format  */
  $youtube_search = '/\s*[a-zA-Z\/\/:\.]*youtu.be\/([a-zA-Z0-9\-_]+)([a-zA-Z0-9\/\*\-\_\?\&\;\%\=\.]*)/i';
  $youtube_replace = '<iframe class="video youtube" title="Youtube Video $1" src="//www.youtube.com/embed/$1"></iframe>';
  $output = preg_replace($youtube_search, $youtube_replace, $output);

  foreach ($link_matches[0] as $key => $value) {
     $output = str_replace( '*******' . $key . '*******', $link_matches[0][$key], $output);
  }

  return $output;
}


/**
 * Filter process callback.
 */
function _feature_wysiwyg_editor_filter_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  // Find images floated with inline styles, examine the float attribute and add
  // a class name of "alignleft" or "alignright" accordingly.
  $matches = array();
  $pattern = '/<img[^>]*float:\s*(left|right);[^>]*>/i';
  preg_match_all($pattern, $text, $matches);

  foreach ($matches[0] as $key => $html) {
    // Add to an existing class attribute or set the class attribute.
    if (strpos($html, 'class="') !== FALSE) {
      $replace = str_replace('class="', 'class="align' . $matches[1][$key] . ' ', $html);
    }
    else {
      $replace = str_replace('<img', '<img class="align' . $matches[1][$key] . '"', $html);
    }

    // Finally, replace the original image html with the new html containing the
    // alignleft/alignright class name.
    $text = str_replace($html, $replace, $text);
  }
  // replace all br tags with the xhtml couterpart
  $text = str_replace('<br>','<br />',$text);

  $tags = array('p','h1','h2','h3','h4');

  foreach ($tags as $tag) {
    $pattern = '/<' . $tag . '[^>]*text-align:\s*center;[^>]*>/i';
    preg_match_all($pattern, $text, $matches);

    foreach ($matches[0] as $key => $html) {
      // Add to an existing class attribute or set the class attribute.
      if (strpos($html, 'class="') !== FALSE) {
        $replace = str_replace('class="', 'class="aligncenter ', $html);
      }
      else {
        $replace = str_replace('<' . $tag . '', '<' . $tag . ' class="aligncenter" ', $html);
      }

      // Finally, replace the original image html with the new html containing the
      // alignleft/alignright class name.
      $text = str_replace($html, $replace, $text);
    }
  }










   $pattern = '/<p[^>]*text-align:\s*right;[^>]*>/i';
  preg_match_all($pattern, $text, $matches);

  foreach ($matches[0] as $key => $html) {
    // Add to an existing class attribute or set the class attribute.
    if (strpos($html, 'class="') !== FALSE) {
      $replace = str_replace('class="', 'class="textalignright ', $html);
    }
    else {
      $replace = str_replace('<p', '<p class="textalignright" ', $html);
    }

    // Finally, replace the original image html with the new html containing the
    // alignleft/alignright class name.
    $text = str_replace($html, $replace, $text);
  }


  $pattern = '/<img[^>]*margin-left:\s*auto;\s*margin-right:\s*auto;[^>]*>/i';
  preg_match_all($pattern, $text, $matches);
  foreach ($matches[0] as $key => $html) {

    // Add to an existing class attribute or set the class attribute.
    if (strpos($html, 'class="') !== FALSE) {
      $replace = str_replace('class="', 'class="imgcenter ', $html);
    }
    else {
      $replace = str_replace('<img', '<img class="imgcenter" ', $html);
    }

    // Finally, replace the original image html with the new html containing the
    // imgcenter class name.
    $text = str_replace($html, $replace, $text);
  }



  return $text;
}



function feature_wysiwyg_editor_menu() {
   $items['admin/config/system/specification'] = array(
      'title' => 'Website Specification',
      'description' => 'Edit the specification',
      'page callback' => '_feature_wysiwyg_editor_generate_specification',
      'access arguments' => array('administer content'),
      'type' => MENU_NORMAL_ITEM
  );
  $items['admin/config/system/styling'] = array(
      'title' => 'Theme Unit Tests',
      'description' => 'Test the styles',
      'page callback' => '_feature_wysiwyg_editor_test_styles',
      'access arguments' => array('administer content'),
      'type' => MENU_NORMAL_ITEM
  );

   // Global library configuration tab.
  $items['admin/config/system/styling/about'] = array(
    'title' => 'Theme Data',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );

  $items['admin/config/system/styling/nested-lists'] = array(
      'title' => 'Nested Lists',
      'description' => 'Test the styles',
      'page callback' => '_feature_wysiwyg_editor_test_lists',
      'type' => MENU_LOCAL_TASK,
       'access arguments' => array('administer content'),

    );
  $items['admin/config/system/styling/markup'] = array(
      'title' => 'Markup',
      'description' => 'Test the styles',
      'page callback' => '_feature_wysiwyg_editor_test_markup',
      'type' => MENU_LOCAL_TASK,
       'access arguments' => array('administer content'),

    );
  $items['admin/config/system/styling/images'] = array(
      'title' => 'Image Alignment',
      'description' => 'Image Alignment',
      'page callback' => '_feature_wysiwyg_editor_test_images',
      'type' => MENU_LOCAL_TASK,
       'access arguments' => array('administer content'),

    );
    $items['admin/config/system/styling/video'] = array(
      'title' => 'Video and Audio',
      'description' => 'Video and Audio Alignment',
      'page callback' => '_feature_wysiwyg_editor_test_video',
      'type' => MENU_LOCAL_TASK,
       'access arguments' => array('administer content'),

    );

    return $items;
  }


function feature_wysiwyg_editor_admin_paths() {
  $paths = array(
    'admin/config/system/styling' => FALSE,
    'admin/config/system/styling/markup' => FALSE,
    'admin/config/system/styling/nested-lists' => FALSE,
    'admin/config/system/styling/video' => FALSE,
    'admin/config/system/styling/images' => FALSE
  );
  return $paths;
}


function _feature_wysiwyg_editor_test_styles() {
  global $theme_key;
  $admin_theme = variable_get('admin_theme');
  if ($admin_theme == 0) {
     $admin_theme = $theme_key;
  }

  $items = array();

  $items[] = array(
    'data' => '<strong>Current theme:</strong> ' . $theme_key
  );

  $items[] = array(
    'data' => '<strong>Path to theme:</strong> ' . path_to_theme()
  );

   $items[] = array(
    'data' => '<strong>Admin theme:</strong> ' . $admin_theme
  );





 return theme('item_list', array('items' => $items));

}

function _feature_wysiwyg_editor_test_lists() {
  return _feature_wysiwyg_editor_theme_lists();
}

function _feature_wysiwyg_editor_test_images() {
  return _feature_wysiwyg_editor_theme_images();
}

function _feature_wysiwyg_editor_test_markup() {
  return _feature_wysiwyg_editor_theme_markup();
}

function _feature_wysiwyg_editor_test_video() {
    return _feature_wysiwyg_editor_theme_video();
}

function _feature_wysiwyg_editor_generate_specification() {
  $types = node_type_get_types() ;
  $output = '';
  foreach ($types as $key => $type) {
    $output .= '<h3>' . $type->name . '</h3>' . $type->description . '<br/>';
    $fields = field_info_instances("node", $key);

    $output .= '<ul>';
    foreach ($fields as $field => $field_data) {
      $output .= '<li><div><strong>' . $field_data['label'] . '</strong> (' . $field . ')' . '</div><div><em>' . $field_data['description'] . ($field_data['required'] ? '' : ' (optional)'  ) . '</em></div></li>';
    }
       $output .= '</ul>';


  }
  return $output;
}
